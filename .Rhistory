scale_color_manual(values = c("black", "red"))
vif_values <- vif(model_mlr)
vif_values
tolerance_values <- 1 / vif_values[1]
vif_table <- data.frame(
VIF = round(vif_values, 2),
Toleranz = round(tolerance_values, 2)
)
nice_table(vif_table, title = c("Tabelle 3", "VIF und Toleranz"))
df <- read_csv('.//data_1.csv')
# Rekodieren zu Dummy Variable
df$experimentalgruppe <- ifelse(
df$bedingung == "Experimental", 1,
ifelse(df$bedingung == "Kontroll", 0, NA_real_)
)
model_dummy_regression <- lm(numerical_ability ~ experimentalgruppe + IQ + experimentalgruppe * IQ , data = df)
summary(model_dummy_regression)
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +  # Scatter points
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +  # Regression lines
scale_color_manual(values = c("blue", "red"), labels = c(0, 1)) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
ggpairs(df, columns = c("correct_items", "IQ", "confidence"),
lower = list(continuous = wrap("smooth", method = "loess", se = TRUE)),
upper = list(continuous = wrap("smooth", method = "loess", se = TRUE)
)
)
model_mlr_squared <- lm(correct_items ~ confidence + IQ + I(confidence^2), data = df)
summary(lm.beta(model_mlr_squared))
model_red <- lm(correct_items ~ confidence + IQ, data = df)
summary(model_red)
model_full <- lm(correct_items ~ confidence + IQ + I(confidence^2), data = df)
summary(model_full)
anova(model_red, model_full)
# Define function to compute F-statistic
boot_anova <- function(data, indices) {
sample_data <- data[indices, ]  # Resample data
anova_result <- aov(wellbeing_t2 ~ therapy_group, data = sample_data)
return(summary(anova_result)[[1]]["therapy", "F value"])  # Extract F-value
}
# Apply bootstrapping with 1000 resamples
boot_result_anova <- boot(df_2_wide, statistic = boot_anova, R = 1000)
# View bootstrapped F-distribution
print(boot_result_anova)
pwr.t.test(d = 0.4,
power = 0.8,
sig.level = 0.05,
type = "two.sample",
alternative = "two.sided")
eta_square_estimated <- 0.08
f_estimated <- sqrt(eta_square_estimated/(1-eta_square_estimated))
pwr.anova.test(k = 3,
f = f_estimated,
power = 0.9,
sig.level = 0.05)
library(knitr)
ressourcen <- data.frame(
Thema = c(
"[R for Data Science](https://r4ds.hadley.nz/)",
"[Learning Statistics with R](https://learningstatisticswithr.com/book/)",
"[Data Transformation mit `dplyr`](https://rstudio.github.io/cheatsheets/html/data-transformation.html)",
"[Data Tidying mit `tidyr`](https://rstudio.github.io/cheatsheets/html/tidyr.html)",
"[Data Import mit dem tidyverse](https://rstudio.github.io/cheatsheets/html/data-import.html)",
"[Faktoren mit `forcats`](https://rstudio.github.io/cheatsheets/html/factors.html)"
),
Beschreibung = c(
"Einführung in Datenanalyse mit dem tidyverse",
"Statistik-Tutorial für Psychologie-Studierende",
"Cheatsheet zur Datenmanipulation",
"Cheatsheet zum Aufräumen von Daten",
"Cheatsheet zum Einlesen von Daten",
"Cheatsheet zum Umgang mit kategorialen Variablen"
)
)
kable(ressourcen, format = "markdown", align = "l", col.names = NA)
ggplot(df_2_long, aes(x = time, y = wellbeing, color = therapy_group, group = therapy_group)) +
stat_summary(fun = mean, geom = "point", size = 2) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
labs(title = "Well-Being über Zeit in Abhängigkeit von der Therapie ",
x = "Zeit",
y = "Well-Being") +
theme_minimal()
df$IQ_cent <- as.vector(scale(df$IQ, center = TRUE, scale = FALSE))
model_dummy_regression <- lm(numerical_ability ~ experimentalgruppe + IQ_cent + experimentalgruppe * IQ_cent , data = df)
summary(model_dummy_regression)
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2, se = TRUE)
scale_color_manual(
name = "Experimentalgruppe",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2)
scale_color_manual(
name = "Experimentalgruppe",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "Experimentalgruppe",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2, se = TRUE) +
scale_color_manual(
name = "Experimentalgruppe",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = NA,
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic(base_size = 14) +
theme(
legend.position = "right",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 11),
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "black")
)
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
df$ex_predicted <- predict(model_dummy_regression, newdata = df)
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic(base_size = 14) +
theme(
legend.position = "right",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 11),
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "black")
)
# Add predicted values from the model
pred <- predict(model_dummy_regression, newdata = df, se.fit = TRUE)
df$ex_predicted <- pred$fit
df$se <- pred$se.fit
df$lower <- df$ex_predicted - 1.96 * df$se
df$upper <- df$ex_predicted + 1.96 * df$se
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
pred <- predict(model_dummy_regression, newdata = df, se.fit = TRUE)
df$ex_predicted <- pred$fit
df$se <- pred$se.fit
df$lower <- df$ex_predicted - 1.96 * df$se
df$upper <- df$ex_predicted + 1.96 * df$se
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_ribbon(
aes(ymin = lower, ymax = upper, fill = factor(experimentalgruppe)),
alpha = 0.2, color = NA) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
# Add predicted values from the model
pred <- predict(model_dummy_regression, newdata = df, se.fit = TRUE)
df$ex_predicted <- pred$fit
df$se <- pred$se.fit
df$lower <- df$ex_predicted - 1.96 * df$se
df$upper <- df$ex_predicted + 1.96 * df$se
# Plot mit zwei separaten Regressionslinien
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_ribbon(
aes(ymin = lower, ymax = upper, fill = factor(experimentalgruppe)),
alpha = 0.2, color = NA) +
geom_line(data = df, aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")  # leserliche Labels
) +
labs(x = "IQ", y = "Numerische Fähigkeiten", color = "experimentalgruppe") +
theme_classic()
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
# Confidence ribbon using SE
geom_ribbon(
aes(ymin = lower, ymax = upper, fill = factor(experimentalgruppe)),
alpha = 0.2,
color = NA
) +
# Regression line
geom_line(aes(y = ex_predicted), linewidth = 1.2) +
# Color and fill adjustments
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")
) +
scale_fill_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")
) +
labs(
x = "IQ",
y = "Numerische Fähigkeiten"
) +
theme_classic()
pred <- predict(model_dummy_regression, newdata = df, se.fit = TRUE)
df$ex_predicted <- pred$fit
df$se <- pred$se.fit
df$lower <- df$ex_predicted - 1.96 * df$se
df$upper <- df$ex_predicted + 1.96 * df$se
ggplot(df, aes(x = IQ, y = numerical_ability, color = factor(experimentalgruppe))) +
geom_point(alpha = 0.6) +
geom_ribbon(
aes(ymin = lower, ymax = upper, fill = factor(experimentalgruppe)),
alpha = 0.2,
color = NA
) +
geom_line(aes(y = ex_predicted), linewidth = 1.2) +
scale_color_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")
) +
scale_fill_manual(
name = "",
breaks = c("0", "1"),
values = c("0" = "#b2df8a", "1" = "#cab2d6"),
labels = c("Kontrollgruppe", "Experimentalgruppe")
) +
labs(
x = "IQ",
y = "Numerische Fähigkeiten"
) +
theme_classic()
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
ggplot(df, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Quadratischer Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items",
caption = "Modell: Y = β₀ + β₁·confidence_cent + β₂·IQ + β₃·confidence_cent² + ε"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")
)
df$confidence_cent <- as.vector(scale(df$confidence, center = TRUE, scale = FALSE))
model_mlr_squared <- lm(correct_items ~ confidence_cent + IQ + I(confidence_cent^2), data = df)
summary(lm.beta(model_mlr_squared))
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
ggplot(df, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Quadratischer Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items",
caption = "Modell: Y = β₀ + β₁·confidence_cent + β₂·IQ + β₃·confidence_cent² + ε"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")
)
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
ggplot(df, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items"
) +
theme_minimal(base_size = 13) +
theme(
axis.title = element_text(face = "bold")
)
model_mlr_squared <- lm(correct_items ~ confidence_cent + IQ + I(confidence_cent^2), data = df)
summary(lm.beta(model_mlr_squared))
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
ggplot(df, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items"
) +
theme_minimal(base_size = 13) +
theme(
axis.title = element_text(face = "bold")
)
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
df_sorted <- df[order(df$confidence), ]
ggplot(df_sorted, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items"
) +
theme_minimal(base_size = 13) +
theme(
axis.title = element_text(face = "bold")
)
model_mlr_squared <- lm(correct_items ~ confidence_cent + IQ + I(confidence_cent^2), data = df)
summary(lm.beta(model_mlr_squared))
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
df_sorted <- df[order(df$confidence), ]
ggplot(df_sorted, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items"
) +
theme_minimal(base_size = 13) +
theme(
axis.title = element_text(face = "bold")
)
library(ggplot2)
df$predicted <- predict(model_mlr_squared)
df_sorted <- df[order(df$confidence), ]
ggplot(df, aes(x = confidence_cent, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray40") +
geom_line(aes(y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Zusammenhang zwischen Confidence und Leistung",
x = "Confidence (zentriert)",
y = "Anzahl korrekt gelöster Items"
) +
theme_minimal(base_size = 13) +
theme(
axis.title = element_text(face = "bold")
)
# Hol dir die Regressionskoeffizienten
coefs <- coef(model_mlr_squared)
# Erstelle eine neue X-Achse (Vertrauen) und halte IQ konstant
conf_seq <- seq(min(df$confidence), max(df$confidence), length.out = 100)
mean_IQ <- mean(df$IQ, na.rm = TRUE)
# Berechne Ŷ = β₀ + β₁·x + β₂·IQ + β₃·x²
pred_df <- data.frame(
confidence = conf_seq,
predicted = coefs[1] + coefs[2]*conf_seq + coefs[3]*mean_IQ + coefs[4]*conf_seq^2
)
# Plot
ggplot(df, aes(x = confidence, y = correct_items)) +
geom_point(alpha = 0.5, color = "gray50") +
geom_line(data = pred_df, aes(x = confidence, y = predicted), color = "#1f78b4", linewidth = 1.5) +
labs(
title = "Quadratischer Zusammenhang zwischen Vertrauen und Leistung",
x = "Vertrauen (confidence)",
y = "Korrekt gelöste Items",
caption = "Berechnet mit Regressionsgewichten bei konstantem IQ"
) +
theme_minimal(base_size = 13)
version$version.string
demo()
